const VALUES = [
  { id: "scissors", value: "‚úåüèΩ" }, //0
  { id: "rock", value: "‚úäüèΩ" }, //1
  { id: "paper", value: "üñêüèΩ" }, //2
];
//t√¨m logic c·ªßa game
//user d√πng id l√†m valuePlayer: "scissors"|"rock"|"paper"
//computer d√πng data-id l√†m valueComputer: "scissors"|"rock"|"paper"
//vd: valuePlayer: "rock"   |  valueComputer: "scissor"
//d√πng ƒë·ªÉ v√†o VALUES t√¨m index c·ªßa ph·∫ßn t·ª≠ c√≥ id == valuePlayer|valueComputer
//   => indexPlayer: 1     | indexComputer: 0
//tr∆∞·ªùng h·ª£p th·∫Øng
// 0 - 2 = -2
// 1 - 0 = 1              indexPlayer - indexComputer = 1 || -2 th·∫Øng return 1
// 2 - 1 = 1
//tr∆∞·ªùng h·ª£p h√≤a          indexPlayer - indexComputer = 0       h√≤a   return 0
//c√≤n l·∫°i                                                       thua  return -1

let i = 0;
const handleChange = () => {
  let computer = document.querySelector("#computer");
  computer.textContent = VALUES[i].value;
  computer.setAttribute("data-id", VALUES[i].id);
  i = i == VALUES.length - 1 ? 0 : ++i;
};
let interval = setInterval(handleChange, 100);

//l√†m h√†m compare so s√°nh valuePlayer v√† valueComputer
//cho ra k·∫øt qu·∫£ th·∫Øng 1 h√≤a 0 thua -1
const compare = (valuePlayer, valueComputer) => {
  let indexPlayer = VALUES.findIndex((item) => {
    return item.id == valuePlayer;
  });
  let indexComputer = VALUES.findIndex((item) => {
    return item.id == valueComputer;
  });
  let result = indexPlayer - indexComputer;
  if ([1, -2].includes(result)) {
    return 1;
  } else if (result == 0) {
    return 0;
  } else {
    return -1;
  }
};

//
const playerItem = document.querySelectorAll(".user");
//duy·ªát qua c√°c item(n√∫t) c·ªßa player
playerItem.forEach((item) => {
  //n·∫øu nh∆∞ c√≥ n√∫t n√†o trong ƒë√≥ di·ªÖn ra sk click
  item.addEventListener("click", (event) => {
    //d·ª´ng m√°y l·∫°i, l·∫•y data-id c·ªßa m√°y l√†m valueComputer
    clearInterval(interval);
    let computer = document.querySelector("#computer");
    let valueComputer = computer.dataset.id; //getAttribute("data-id");
    let valuePlayer = event.target.id; //getAttribute
    let result = compare(valuePlayer, valueComputer);
    console.log(result);
    //duy·ªát c√°c n√∫t v√† x√≥a actived v√† th√™m actived v√†o n√∫t v·ª´a b·∫•m
    playerItem.forEach((_item) => {
      _item.classList.remove("actived");
      _item.style.pointerEvents = "none";
    });
    event.target.classList.add("actived");

    //hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
    let alertDiv = document.createElement("div");
    alertDiv.classList.add("alert");
    let msg = "";
    if (result == 1) {
      msg = "B·∫°n Th·∫Øng";
      alertDiv.classList.add("alert-success");
    } else if (result == 0) {
      msg = "B·∫°n H√≤a";
      alertDiv.classList.add("alert-warning");
    } else {
      msg = "B·∫°n Thua";
      alertDiv.classList.add("alert-dark");
    }
    alertDiv.textContent = msg;
    document.querySelector(".notification").appendChild(alertDiv);
    document.querySelector(".play-again").classList.remove("d-none");
  });
});

//s·ª± ki·ªán ch∆°i l·∫°i
document.querySelector("#btn-play-again").addEventListener("click", (event) => {
  //cho m√°y ch·∫°y l·∫°i
  clearInterval(interval);
  interval = setInterval(handleChange, 100);
  //xo√° actived tr·∫£ l·∫°i kh·∫£ nƒÉng click
  playerItem.forEach((_item) => {
    _item.classList.remove("actived");
    _item.style.pointerEvents = "";
  });
  //xo√° th√¥ng b√°o
  document.querySelector(".notification").innerHTML = "";
  //·∫•n n√∫t ch∆°i l·∫°i
  document.querySelector(".play-again").classList.add("d-none");

  //location.reload();
});

//m·ªët update t√≠nh nƒÉng n·∫°p card :D
